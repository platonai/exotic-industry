<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.4</version>
		<relativePath/>
	</parent>

	<groupId>ai.platon.exotic</groupId>
	<artifactId>exotic-industry</artifactId>
	<version>1.10.0-SNAPSHOT</version>

	<packaging>pom</packaging>

	<name>Exotic Industry</name>
	<description>Exotic is the professional edition of pulsar</description>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>

	<scm>
		<connection>scm:git:https://github.com/platonai/exotic-industry.git</connection>
		<developerConnection>scm:git:https://github.com/platonai/exotic-industry.git</developerConnection>
		<url>https://github.com/platonai/exotic-industry</url>
		<tag>v1.10.0-SNAPSHOT</tag>
	</scm>

	<developers>
		<developer>
			<name>Vincent Zhang</name>
			<email>ivincent.zhang@gmail.com</email>
			<organization>platon.ai</organization>
			<timezone>+8</timezone>
		</developer>
	</developers>

	<repositories>
		<repository>
			<id>Central</id>
			<url>https://repo1.maven.org/maven2/</url>
		</repository>

		<repository>
			<id>platon.ai</id>
			<url>http://static.platonic.fun/repo/</url>
			<releases>
				<enabled>true</enabled>
				<checksumPolicy>ignore</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<checksumPolicy>ignore</checksumPolicy>
			</snapshots>
		</repository>

		<repository>
			<id>sonatype-snapshots</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<modules>
		<module>exotic-industry-common</module>
		<module>exotic-bidding</module>
		<module>exotic-automobile</module>
	</modules>

	<build>
		<defaultGoal>package</defaultGoal>

		<pluginManagement>
			<plugins>
				<!--  kotlin  -->
				<plugin>
					<groupId>org.jetbrains.kotlin</groupId>
					<artifactId>kotlin-maven-plugin</artifactId>
					<version>${kotlin.version}</version>
					<executions>
						<execution>
							<id>compile</id>
							<goals>
								<goal>compile</goal>
							</goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
						<execution>
							<id>test-compile</id>
							<goals>
								<goal>test-compile</goal>
							</goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
					</executions>
					<!--  Required by spring  -->
					<dependencies>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-allopen</artifactId>
							<version>${kotlin.version}</version>
						</dependency>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-noarg</artifactId>
							<version>${kotlin.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<args>
							<arg>-Xjsr305=strict</arg>
						</args>
						<compilerPlugins>
							<plugin>spring</plugin>
							<plugin>jpa</plugin>
							<plugin>all-open</plugin>
						</compilerPlugins>
						<pluginOptions>
							<option>all-open:annotation=javax.persistence.Entity</option>
							<option>all-open:annotation=javax.persistence.Embeddable</option>
							<option>all-open:annotation=javax.persistence.MappedSuperclass</option>
						</pluginOptions>
						<jvmTarget>${javac.target.version}</jvmTarget>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<configuration>
						<filesets>
							<fileset>
								<directory>${basedir}/lib</directory>
								<followSymlinks>false</followSymlinks>
								<useDefaultExcludes>true</useDefaultExcludes>
								<includes>
									<include>*.*</include>
								</includes>
							</fileset>
						</filesets>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${maven-exec-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>2.5.4</version>
				</plugin>
				<plugin>
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>1.6.7</version>
					<extensions>true</extensions>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>
			<!--  kotlin plugin should come before maven-compiler-plugin  -->
			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${javac.src.version}</source>
					<target>${javac.target.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>3.0.0-M5</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.1</version>
			</plugin>
			<!-- unit test support -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.1.0</version>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>ai.platon.exotic</groupId>
				<artifactId>exotic-driver</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>ai.platon.exotic</groupId>
				<artifactId>exotic-server</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>ai.platon.exotic</groupId>
				<artifactId>exotic-services</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>ai.platon.pulsar</groupId>
				<artifactId>pulsar-all</artifactId>
				<version>${pulsar.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.glassfish.jaxb</groupId>
						<artifactId>*</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>servlet-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>ai.platon.pulsar</groupId>
				<artifactId>pulsar-dom</artifactId>
				<version>${pulsar.version}</version>
			</dependency>
			<dependency>
				<groupId>ai.platon.pulsar</groupId>
				<artifactId>pulsar-ql-common</artifactId>
				<version>${pulsar.version}</version>
			</dependency>

			<dependency>
				<groupId>ai.platon.scent</groupId>
				<artifactId>scent-resources</artifactId>
				<version>${scent.version}</version>
			</dependency>

			<!-- Java Predictive Model Markup Language -->
			<dependency>
				<groupId>org.jpmml</groupId>
				<artifactId>pmml-agent</artifactId>
				<version>${pmml.version}</version>
			</dependency>

			<!-- Java Predictive Model Markup Language -->
			<dependency>
				<groupId>org.jpmml</groupId>
				<artifactId>pmml-model-jackson</artifactId>
				<version>${pmml.version}</version>
			</dependency>
			<dependency>
				<groupId>org.jpmml</groupId>
				<artifactId>pmml-evaluator-metro</artifactId>
				<version>${pmml.version}</version>
			</dependency>
			<dependency>
				<groupId>org.jpmml</groupId>
				<artifactId>pmml-evaluator-testing</artifactId>
				<version>${pmml.version}</version>
			</dependency>

			<!-- jakarta.xml.bind-api:3.0.1 is required by pmml-evaluator-metro:1.6.4 -->
			<!-- The JAXB APIs are considered to be Java EE APIs and therefore are no longer contained on the default classpath in Java SE 9.
				In Java 11, they are completely removed from the JDK.

				@see https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception
				-->
			<!-- API, java.xml.bind module -->
			<dependency>
				<groupId>jakarta.xml.bind</groupId>
				<artifactId>jakarta.xml.bind-api</artifactId>
				<version>3.0.1</version>
			</dependency>
			<!-- Override the default version, required by jpmml -->
			<dependency>
				<groupId>com.sun.activation</groupId>
				<artifactId>jakarta.activation</artifactId>
				<version>2.0.1</version>
			</dependency>

			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>3.1.0</version>
			</dependency>
			<dependency>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-stdlib-jdk8</artifactId>
				<version>${kotlin.version}</version>
			</dependency>
			<dependency>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-reflect</artifactId>
				<version>${kotlin.version}</version>
			</dependency>
			<dependency>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-test-junit</artifactId>
				<version>${kotlin.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-core</artifactId>
				<version>${logback.version}</version>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
			</dependency>
			<dependency>
				<groupId>io.mockk</groupId>
				<artifactId>mockk</artifactId>
				<version>1.12.2</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
	</dependencies>

	<properties>
		<javac.src.version>11</javac.src.version>
		<javac.target.version>11</javac.target.version>
		<kotlin.version>1.5.32</kotlin.version>

		<pulsar.version>1.10.14</pulsar.version>
		<scent.version>1.10.6</scent.version>

		<pmml.version>1.6.4</pmml.version>
		<!-- Override spring boot's version -->
		<glassfish-jaxb.version>3.0.2</glassfish-jaxb.version>
	</properties>
</project>
